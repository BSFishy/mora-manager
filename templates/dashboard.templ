package templates

import (
	"fmt"
	"github.com/BSFishy/mora-manager/model"
	"github.com/BSFishy/mora-manager/templates/styles"
	"time"
)

type DashboardProps struct {
	User         *model.User
	Environments []model.Environment
	Deployments  []model.Deployment
	TotalPages   int
	Page         int
}

templ Dashboard(props DashboardProps) {
	@layout("Dashboard") {
		<div
			class={ styles.W("100vw"), styles.Minh("100vh"), styles.Flex(), styles.FlexRow(), styles.FlexWrap(), styles.Justify("center"), styles.Gap(3), styles.P(4), styles.Pxp("10%") }
		>
			<div class={ styles.FlexBasis("600px"), styles.FlexGrow("6") }>
				<h3 class={ styles.TextSize("xl"), styles.My(2) }>Environments</h3>
				@submit(templ.Attributes{"type": "link", "href": "/environment"}) {
					Create environment
				}
				if len(props.Environments) > 0 {
					<div id="environments" hx-history="false" class={ styles.My(2) }>
						@DashboardEnvironments(props.Environments)
					</div>
				}
				if len(props.Deployments) > 0 {
					<hr/>
					<h3 class={ styles.TextSize("xl"), styles.My(3) }>Deployments</h3>
					<div
						id="deployments"
						hx-history="false"
						hx-get={ fmt.Sprintf("/htmx/deployment?page=%d", props.Page) }
						hx-trigger="every 2s"
					>
						@DashboardDeployments(props.Environments, props.Deployments, props.TotalPages, props.Page)
					</div>
				}
			</div>
			<div
				class={ styles.FlexBasis("400px"), styles.FlexGrow("4"), styles.H("min-content"), styles.Border(), styles.BorderColor(styles.Emerald[700]), styles.Rounded(styles.Radius["md"]), styles.BorderWidth("3px"), styles.P(3) }
			>
				<span hx-disable>{ props.User.Username }</span>
				<br/>
				@submit(templ.Attributes{"type": "link", "href": "/tokens"}) {
					Tokens
				}
				@submit(templ.Attributes{"hx-post": "/htmx/signout", "class": templ.Classes(styles.Mx(2))}) {
					Sign out
				}
			</div>
		</div>
	}
}

templ DashboardEnvironments(environments []model.Environment) {
	<table>
		<thead>
			<tr>
				<th class={ styles.P(2) }>Name</th>
				<th class={ styles.P(2) }>Slug</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			for _, environment := range environments {
				<tr class={ styles.BorderWidthTop("1px") }>
					<td class={ styles.P(2) }>{ environment.Name }</td>
					<td class={ styles.P(2) }>{ environment.Slug }</td>
					<td class={ styles.P(2) }>
						<form hx-delete="/htmx/environment" hx-target="#environments">
							<input type="hidden" name="id" value={ environment.Id }/>
							@submit(templ.Attributes{}) {
								Delete
							}
						</form>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

func environmentName(envs []model.Environment, id string) string {
	for _, env := range envs {
		if env.Id == id {
			return env.Name
		}
	}
	panic("uh oh")
}

func prevButtonVariant(page int) string {
	if page == 1 {
		return "disabled"
	}

	return "inverted"
}

func nextButtonVariant(totalPages, page int) string {
	if page == totalPages {
		return "disabled"
	}

	return "inverted"
}

templ DashboardDeployments(envs []model.Environment, deployments []model.Deployment, totalPages int, page int) {
	<table>
		<thead>
			<tr>
				<th class={ styles.P(2) }>Date</th>
				<th class={ styles.P(2) }>ID</th>
				<th class={ styles.P(2) }>Environment</th>
				<th class={ styles.P(2) }>Status</th>
			</tr>
		</thead>
		<tbody>
			for _, deployment := range deployments {
				<tr class={ styles.BorderWidthTop("1px") }>
					<td
						class={ styles.P(2), "timed" }
						data-dt={ deployment.CreatedAt.Format(time.RFC3339) }
					><pre>{ deployment.CreatedAt.Format("Jan _2 3:04PM") }</pre></td>
					<td class={ styles.P(2) }>
						<pre>
							@link(templ.Attributes{"href": fmt.Sprintf("/deployment/%s", deployment.Id)}) {
								{ deployment.Id }
							}
						</pre>
					</td>
					<td class={ styles.P(2) } hx-disable>
						{ environmentName(envs, deployment.EnvironmentId) }
					</td>
					<td class={ styles.P(2) }>{ statusToText[deployment.Status] }</td>
				</tr>
			}
			<script>
				document.querySelectorAll(".timed").forEach(el => {
					const iso = el.dataset.dt;
					if (!iso) return;

					const date = new Date(iso);

					const month = date.toLocaleString(undefined, { month: "short" });
					const day = date.getDate(); // no zero-padding
					let hours = date.getHours();
					const minutes = date.getMinutes().toString().padStart(2, "0");
					const ampm = hours >= 12 ? "PM" : "AM";
					hours = hours % 12;
					if (hours === 0) hours = 12;

					el.innerHTML = `<pre>${month} ${day} ${hours}:${minutes}${ampm}</pre>`;
				});
			</script>
		</tbody>
	</table>
	@submit(templ.Attributes{"type": "link", "variant": prevButtonVariant(page), "href": fmt.Sprintf("/dashboard?page=%d", page-1)}) {
		&lt;
	}
	<span class={ styles.Mx(2) }>
		Page { page }
	</span>
	@submit(templ.Attributes{"type": "link", "variant": nextButtonVariant(totalPages, page), "href": fmt.Sprintf("/dashboard?page=%d", page+1)}) {
		&gt;
	}
}
